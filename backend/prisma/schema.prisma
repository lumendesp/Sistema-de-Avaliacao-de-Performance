// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  COLLABORATOR
  MANAGER
  MENTOR
  HR
  COMMITTEE
  ADMIN
}

enum MotivationLevel {
  CONCORDO_TOTALMENTE
  CONCORDO_PARCIALMENTE
  DISCORDO_PARCIALMENTE
  DISCORDO_TOTALMENTE
}

enum CycleStatus {
  IN_PROGRESS
  CLOSED
  PUBLISHED
}

enum CriterionName {
  ORGANIZACAO_NO_TRABALHO
  ATENDER_AOS_PRAZOS
  SENTIMENTO_DE_DONO
  RESILIENCIA_NAS_ADVERSIDADES
  CAPACIDADE_DE_APRENDER
  TEAM_PLAYER
  FAZER_MAIS_COM_MENOS
  ENTREGAR_COM_QUALIDADE
  PENSAR_FORA_DA_CAIXA
  GENTE
  RESULTADOS
  EVOLUCAO_DA_ROCKET_COR
}

model Position {
  id                 Int                   @id @default(autoincrement())
  name               String
  users              User[]
  configuredCriteria ConfiguredCriterion[] @relation("PositionConfiguredCriteria")
  CriterionGroup     CriterionGroup[]
}

model Track {
  id                 Int                   @id @default(autoincrement())
  name               String
  users              User[]
  configuredCriteria ConfiguredCriterion[] @relation("TrackConfiguredCriteria")
  userHistory        UserTrack[]
  CriterionGroup     CriterionGroup[]
}

model Unit {
  id                 Int                   @id @default(autoincrement())
  name               String
  users              User[]
  configuredCriteria ConfiguredCriterion[] @relation("UnitConfiguredCriteria")
  CriterionGroup     CriterionGroup[]
}

model UserRole {
  userId Int
  role   Role
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, role])
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  username String  @unique
  email    String  @unique
  password String
  active   Boolean @default(true)
  photo    String? //url da foto

  positionId Int?
  unitId     Int?
  trackId    Int?

  position     Position?   @relation(fields: [positionId], references: [id])
  track        Track?      @relation(fields: [trackId], references: [id])
  unit         Unit?       @relation(fields: [unitId], references: [id])
  roles        UserRole[]
  trackHistory UserTrack[]

  // Relacionamento mentor <-> colaboradores (mentees)
  mentorId Int?
  mentor   User?  @relation("UserMentor", fields: [mentorId], references: [id])
  mentees  User[] @relation("UserMentor")

  // Avaliações & Referências
  peerEvaluationsGiven       PeerEvaluation[]    @relation("PeerEvaluator")
  peerEvaluationsReceived    PeerEvaluation[]    @relation("PeerEvaluatee")
  mentorEvaluationsGiven     MentorEvaluation[]  @relation("MentorEvaluator")
  mentorEvaluationsReceived  MentorEvaluation[]  @relation("MentorEvaluatee")
  selfEvaluations            SelfEvaluation[]
  referencesProvided         Reference[]         @relation("ReferenceProvider")
  referencesReceived         Reference[]         @relation("ReferenceReceiver")
  managerEvaluationsGiven    ManagerEvaluation[] @relation("ManagerEvaluator")
  managerEvaluationsReceived ManagerEvaluation[] @relation("ManagerEvaluatee")

  // Equalização
  adjustedScores FinalScore[]    @relation("CommitteeAdjuster")
  committeeNotes CommitteeNote[]
  discrepancies  Discrepancy[]
  aiSummaries    AISummary[]
  finalScores    FinalScore[]

  manages             ManagerCollaborator[] @relation("ManagerToCollaborator")
  managedBy           ManagerCollaborator[] @relation("CollaboratorToManager")
  EvaluationCycleUser EvaluationCycleUser[]

  climateSurveysCreated ClimateSurvey[] @relation("UserCreatedClimateSurveys")
  climateSurveyResponses ClimateSurveyResponse[]
}

// ---------------- HISTÓRICO DE TRILHAS -----------------
model UserTrack {
  id      Int       @id @default(autoincrement())
  userId  Int
  trackId Int
  start   DateTime
  end     DateTime?

  user  User  @relation(fields: [userId], references: [id])
  track Track @relation(fields: [trackId], references: [id])
}

model Criterion {
  id                 Int           @id @default(autoincrement())
  name               CriterionName
  generalDescription String
  active             Boolean       @default(true)
  weight             Int

  configurations         ConfiguredCriterion[]
  selfEvaluationItems    SelfEvaluationItem[]
  mentorEvaluationItems  MentorEvaluationItem[]
  managerEvaluationItems ManagerEvaluationItem[]
}

model CriterionGroup {
  id         Int    @id @default(autoincrement())
  name       String
  trackId    Int
  unitId     Int
  positionId Int

  track    Track    @relation(fields: [trackId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  position Position @relation(fields: [positionId], references: [id])

  configuredCriteria ConfiguredCriterion[] @relation("GroupConfiguredCriteria")
}

model ConfiguredCriterion {
  id          Int     @id @default(autoincrement())
  criterionId Int
  groupId     Int
  trackId     Int
  unitId      Int
  positionId  Int
  mandatory   Boolean

  criterion Criterion      @relation(fields: [criterionId], references: [id])
  group     CriterionGroup @relation("GroupConfiguredCriteria", fields: [groupId], references: [id])
  track     Track          @relation("TrackConfiguredCriteria", fields: [trackId], references: [id])
  unit      Unit           @relation("UnitConfiguredCriteria", fields: [unitId], references: [id])
  position  Position       @relation("PositionConfiguredCriteria", fields: [positionId], references: [id])

  selfEvaluationItems SelfEvaluationItem[]
}

// ---------- CICLOS ----------
model EvaluationCycle {
  id        Int         @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  status    CycleStatus
  type      Role        @default(COLLABORATOR) // COLLABORATOR, MANAGER, HR, COMMITTEE
  createdAt DateTime    @default(now())

  // Todas as avaliações ligadas ao ciclo
  selfEvaluations     SelfEvaluation[]
  peerEvaluations     PeerEvaluation[]
  mentorEvaluations   MentorEvaluation[]
  references          Reference[]
  finalScores         FinalScore[]
  discrepancies       Discrepancy[]
  aiSummaries         AISummary[]
  committeeNotes      CommitteeNote[]
  managerEvaluations  ManagerEvaluation[]
  EvaluationCycleUser EvaluationCycleUser[]
}

model EvaluationCycleUser {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  cycle   EvaluationCycle @relation(fields: [cycleId], references: [id])
  cycleId Int

  submittedAt DateTime?
  isSubmit    Boolean   @default(false)

  @@unique([userId, cycleId]) // garante 1 submissão por user por ciclo
}

// ---------- FORMULÁRIOS DE AVALIAÇÃO ----------
model SelfEvaluation {
  id        Int      @id @default(autoincrement())
  userId    Int
  cycleId   Int
  createdAt DateTime @default(now())

  averageScore Float?

  user  User                 @relation(fields: [userId], references: [id])
  cycle EvaluationCycle      @relation(fields: [cycleId], references: [id])
  items SelfEvaluationItem[]
}

model SelfEvaluationItem {
  id                    Int     @id @default(autoincrement())
  evaluationId          Int
  criterionId           Int
  configuredCriterionId Int?
  score                 Int
  justification         String
  scoreDescription      String?

  evaluation          SelfEvaluation       @relation(fields: [evaluationId], references: [id])
  criterion           Criterion            @relation(fields: [criterionId], references: [id])
  configuredCriterion ConfiguredCriterion? @relation(fields: [configuredCriterionId], references: [id])
}

model Project {
  id          Int                     @id @default(autoincrement())
  name        String                  @unique
  description String? // opcional, pode ter mais detalhes
  evaluations PeerEvaluationProject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PeerEvaluationProject {
  id               Int @id @default(autoincrement())
  peerEvaluationId Int
  projectId        Int
  period           Int // vamos considerar meses

  peerEvaluation PeerEvaluation @relation(fields: [peerEvaluationId], references: [id])
  project        Project        @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PeerEvaluation {
  id           Int              @id @default(autoincrement())
  evaluatorId  Int
  evaluateeId  Int
  cycleId      Int
  createdAt    DateTime         @default(now())
  score        Float
  strengths    String
  improvements String
  motivation   MotivationLevel?

  evaluator User                    @relation("PeerEvaluator", fields: [evaluatorId], references: [id])
  evaluatee User                    @relation("PeerEvaluatee", fields: [evaluateeId], references: [id])
  cycle     EvaluationCycle         @relation(fields: [cycleId], references: [id])
  projects  PeerEvaluationProject[]
}

model MentorEvaluation {
  id            Int      @id @default(autoincrement())
  evaluatorId   Int
  evaluateeId   Int
  cycleId       Int
  createdAt     DateTime @default(now())
  score         Int
  justification String

  evaluator User                   @relation("MentorEvaluator", fields: [evaluatorId], references: [id])
  evaluatee User                   @relation("MentorEvaluatee", fields: [evaluateeId], references: [id])
  cycle     EvaluationCycle        @relation(fields: [cycleId], references: [id])
  items     MentorEvaluationItem[]
}

model MentorEvaluationItem {
  id               Int     @id @default(autoincrement())
  evaluationId     Int
  criterionId      Int
  score            Int
  justification    String
  scoreDescription String?

  evaluation MentorEvaluation @relation(fields: [evaluationId], references: [id])
  criterion  Criterion        @relation(fields: [criterionId], references: [id])
}

model ManagerEvaluation {
  id          Int      @id @default(autoincrement())
  evaluatorId Int
  evaluateeId Int
  cycleId     Int
  createdAt   DateTime @default(now())
  status      String   @default("draft") // draft | submitted

  evaluator User                    @relation("ManagerEvaluator", fields: [evaluatorId], references: [id])
  evaluatee User                    @relation("ManagerEvaluatee", fields: [evaluateeId], references: [id])
  cycle     EvaluationCycle         @relation(fields: [cycleId], references: [id])
  items     ManagerEvaluationItem[]
}

model ManagerEvaluationItem {
  id               Int     @id @default(autoincrement())
  evaluationId     Int
  criterionId      Int
  score            Int
  justification    String
  scoreDescription String?
  groupId          Int

  evaluation ManagerEvaluation @relation(fields: [evaluationId], references: [id])
  criterion  Criterion         @relation(fields: [criterionId], references: [id])
}

// ---------- REFERÊNCIAS ----------
model Reference {
  id            Int      @id @default(autoincrement())
  providerId    Int
  receiverId    Int
  cycleId       Int
  createdAt     DateTime @default(now())
  justification String

  provider User            @relation("ReferenceProvider", fields: [providerId], references: [id])
  receiver User            @relation("ReferenceReceiver", fields: [receiverId], references: [id])
  cycle    EvaluationCycle @relation(fields: [cycleId], references: [id])
}

// ---------- EQUALIZAÇÃO ----------
model FinalScore {
  id             Int     @id @default(autoincrement())
  userId         Int
  cycleId        Int
  executionScore Float? // Nota de execução
  postureScore   Float? // Nota de postura
  finalScore     Float? // Nota final consolidada
  summary        String? // Resumo textual do ciclo para o usuário
  adjustedBy     Int? // membro do comitê
  justification  String

  user     User            @relation(fields: [userId], references: [id])
  cycle    EvaluationCycle @relation(fields: [cycleId], references: [id])
  adjuster User?           @relation("CommitteeAdjuster", fields: [adjustedBy], references: [id])

  createdAt DateTime @default(now())
}

model Discrepancy {
  id      Int    @id @default(autoincrement())
  userId  Int
  cycleId Int
  type    String // exemplo: "Auto vs Pares"
  detail  String

  user  User            @relation(fields: [userId], references: [id])
  cycle EvaluationCycle @relation(fields: [cycleId], references: [id])
}

model AISummary {
  id      Int    @id @default(autoincrement())
  userId  Int
  cycleId Int
  text    String

  user  User            @relation(fields: [userId], references: [id])
  cycle EvaluationCycle @relation(fields: [cycleId], references: [id])

  @@unique([userId, cycleId])
}

model CommitteeNote {
  id      Int    @id @default(autoincrement())
  userId  Int
  cycleId Int
  text    String

  user  User            @relation(fields: [userId], references: [id])
  cycle EvaluationCycle @relation(fields: [cycleId], references: [id])
}

model ManagerCollaborator {
  managerId      Int
  collaboratorId Int

  manager      User @relation("ManagerToCollaborator", fields: [managerId], references: [id])
  collaborator User @relation("CollaboratorToManager", fields: [collaboratorId], references: [id])

  @@id([managerId, collaboratorId])
}

model BrutalFactsCache {
  id        Int      @id @default(autoincrement())
  cycleId   Int      @unique
  data      Json
  createdAt DateTime @default(now())
}

model ClimateSurvey {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  endDate     DateTime
  createdById Int
  createdBy   User     @relation("UserCreatedClimateSurveys", fields: [createdById], references: [id])

  questions   ClimateSurveyQuestion[]
  responses   ClimateSurveyResponse[]
  aiSummaries ClimateSurveyAISummary[]
}

model ClimateSurveyQuestion {
  id       Int    @id @default(autoincrement())
  surveyId Int
  text     String

  survey  ClimateSurvey         @relation(fields: [surveyId], references: [id])
  answers ClimateSurveyAnswer[]
}

model ClimateSurveyResponse {
  id           Int       @id @default(autoincrement())
  hashId       String
  isSubmit     Boolean
  submittedAt  DateTime?
  surveyId     Int
  userId       Int

  survey       ClimateSurvey @relation(fields: [surveyId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  answers      ClimateSurveyAnswer[]
}

model ClimateSurveyAnswer {
  id            Int          @id @default(autoincrement())
  questionId    Int
  responseId    Int
  level         ClimateLevel
  justification String

  question ClimateSurveyQuestion @relation(fields: [questionId], references: [id])
  response ClimateSurveyResponse @relation(fields: [responseId], references: [id])
}

model ClimateSurveyAISummary {
  id                Int             @id @default(autoincrement())
  surveyId          Int
  text              String? // Resumo completo
  shortText         String? // Resumo curto
  satisfactionScore Int? // Score de satisfação (0-100)
  status            AISummaryStatus @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  survey ClimateSurvey @relation(fields: [surveyId], references: [id])

  @@unique([surveyId])
}

enum ClimateLevel {
  CONCORDO_TOTALMENTE
  CONCORDO_PARCIALMENTE
  NEUTRO
  DISCORDO_PARCIALMENTE
  DISCORDO_TOTALMENTE
}

enum AISummaryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
